/*   
  STM32F103C8 Blue Pill with DS3231 RTC Module
  Using bit-banged I2C on PB8/PB9 and UART2 on PA2/PA3
*/

// DS3231 I2C address
#define DS3231_ADDRESS 0x68

// Bit-banged I2C pins
#define SDA_PIN PB9
#define SCL_PIN PB8

// DS3231 registers
#define DS3231_REG_SECONDS 0x00
#define DS3231_REG_MINUTES 0x01
#define DS3231_REG_HOURS   0x02
#define DS3231_REG_DAY     0x03
#define DS3231_REG_DATE    0x04
#define DS3231_REG_MONTH   0x05
#define DS3231_REG_YEAR    0x06
#define DS3231_REG_CONTROL 0x0E
#define DS3231_REG_STATUS  0x0F

// I2C bit-banging timing
#define I2C_DELAY_US 5

// Storage for date/time
uint8_t seconds, minutes, hours, day, date, month, year;
char dateTimeStr[64]; // for sprintf

// Bit-banged I2C functions
void i2c_init() {
  pinMode(SCL_PIN, OUTPUT_OPEN_DRAIN);
  pinMode(SDA_PIN, OUTPUT_OPEN_DRAIN);
  digitalWrite(SCL_PIN, HIGH);
  digitalWrite(SDA_PIN, HIGH);
}

void i2c_start() {
  digitalWrite(SDA_PIN, HIGH);
  digitalWrite(SCL_PIN, HIGH);
  delayMicroseconds(I2C_DELAY_US);
  digitalWrite(SDA_PIN, LOW);
  delayMicroseconds(I2C_DELAY_US);
  digitalWrite(SCL_PIN, LOW);
}

void i2c_stop() {
  digitalWrite(SCL_PIN, LOW);
  digitalWrite(SDA_PIN, LOW);
  delayMicroseconds(I2C_DELAY_US);
  digitalWrite(SCL_PIN, HIGH);
  delayMicroseconds(I2C_DELAY_US);
  digitalWrite(SDA_PIN, HIGH);
  delayMicroseconds(I2C_DELAY_US);
}

bool i2c_write_byte(uint8_t data) {
  // Send 8 bits, MSB first
  for (int i = 7; i >= 0; i--) {
    digitalWrite(SCL_PIN, LOW);
    digitalWrite(SDA_PIN, data & (1 << i) ? HIGH : LOW);
    delayMicroseconds(I2C_DELAY_US);
    digitalWrite(SCL_PIN, HIGH);
    delayMicroseconds(I2C_DELAY_US);
  }
  
  // Get ACK
  digitalWrite(SCL_PIN, LOW);
  pinMode(SDA_PIN, INPUT_PULLUP);
  delayMicroseconds(I2C_DELAY_US);
  digitalWrite(SCL_PIN, HIGH);
  delayMicroseconds(I2C_DELAY_US);
  bool ack = (digitalRead(SDA_PIN) == LOW);  // ACK = LOW
  digitalWrite(SCL_PIN, LOW);
  pinMode(SDA_PIN, OUTPUT_OPEN_DRAIN);
  
  return ack;
}

uint8_t i2c_read_byte(bool ack) {
  uint8_t data = 0;
  
  pinMode(SDA_PIN, INPUT_PULLUP);
  
  // Read 8 bits, MSB first
  for (int i = 7; i >= 0; i--) {
    digitalWrite(SCL_PIN, LOW);
    delayMicroseconds(I2C_DELAY_US);
    digitalWrite(SCL_PIN, HIGH);
    delayMicroseconds(I2C_DELAY_US);
    if (digitalRead(SDA_PIN)) {
      data |= (1 << i);
    }
  }
  
  // Send ACK or NACK
  digitalWrite(SCL_PIN, LOW);
  pinMode(SDA_PIN, OUTPUT_OPEN_DRAIN);
  digitalWrite(SDA_PIN, ack ? LOW : HIGH);  // ACK = LOW, NACK = HIGH
  delayMicroseconds(I2C_DELAY_US);
  digitalWrite(SCL_PIN, HIGH);
  delayMicroseconds(I2C_DELAY_US);
  digitalWrite(SCL_PIN, LOW);
  
  return data;
}

// DS3231 functions
bool ds3231_write_register(uint8_t reg, uint8_t value) {
  i2c_start();
  if (!i2c_write_byte(DS3231_ADDRESS << 1)) { // Write address
    i2c_stop();
    return false;
  }
  if (!i2c_write_byte(reg)) { // Register address
    i2c_stop();
    return false;
  }
  if (!i2c_write_byte(value)) { // Data
    i2c_stop();
    return false;
  }
  i2c_stop();
  return true;
}

bool ds3231_read_register(uint8_t reg, uint8_t *value) {
  i2c_start();
  if (!i2c_write_byte(DS3231_ADDRESS << 1)) { // Write address
    i2c_stop();
    return false;
  }
  if (!i2c_write_byte(reg)) { // Register address
    i2c_stop();
    return false;
  }
  
  i2c_start(); // Repeated start
  if (!i2c_write_byte((DS3231_ADDRESS << 1) | 1)) { // Read address
    i2c_stop();
    return false;
  }
  
  *value = i2c_read_byte(false); // Read with NACK
  i2c_stop();
  return true;
}

bool ds3231_read_time() {
  uint8_t value;
  
  // Read seconds
  if (!ds3231_read_register(DS3231_REG_SECONDS, &value)) return false;
  seconds = (value & 0x0F) + ((value & 0x70) >> 4) * 10;
  
  // Read minutes
  if (!ds3231_read_register(DS3231_REG_MINUTES, &value)) return false;
  minutes = (value & 0x0F) + ((value & 0x70) >> 4) * 10;
  
  // Read hours (assuming 24-hour mode)
  if (!ds3231_read_register(DS3231_REG_HOURS, &value)) return false;
  hours = (value & 0x0F) + ((value & 0x30) >> 4) * 10;
  
  // Read day
  if (!ds3231_read_register(DS3231_REG_DAY, &value)) return false;
  day = value;
  
  // Read date
  if (!ds3231_read_register(DS3231_REG_DATE, &value)) return false;
  date = (value & 0x0F) + ((value & 0x30) >> 4) * 10;
  
  // Read month
  if (!ds3231_read_register(DS3231_REG_MONTH, &value)) return false;
  month = (value & 0x0F) + ((value & 0x10) >> 4) * 10;
  
  // Read year
  if (!ds3231_read_register(DS3231_REG_YEAR, &value)) return false;
  year = (value & 0x0F) + ((value & 0xF0) >> 4) * 10;
  
  return true;
}

bool ds3231_set_time(uint8_t y, uint8_t m, uint8_t d, uint8_t h, uint8_t min, uint8_t sec) {
  // Convert decimal to BCD
  uint8_t sec_bcd = ((sec / 10) << 4) | (sec % 10);
  uint8_t min_bcd = ((min / 10) << 4) | (min % 10);
  uint8_t hour_bcd = ((h / 10) << 4) | (h % 10);
  uint8_t date_bcd = ((d / 10) << 4) | (d % 10);
  uint8_t month_bcd = ((m / 10) << 4) | (m % 10);
  uint8_t year_bcd = ((y / 10) << 4) | (y % 10);
  
  // Write time/date registers
  if (!ds3231_write_register(DS3231_REG_SECONDS, sec_bcd)) return false;
  if (!ds3231_write_register(DS3231_REG_MINUTES, min_bcd)) return false;
  if (!ds3231_write_register(DS3231_REG_HOURS, hour_bcd)) return false;
  if (!ds3231_write_register(DS3231_REG_DATE, date_bcd)) return false;
  if (!ds3231_write_register(DS3231_REG_MONTH, month_bcd)) return false;
  if (!ds3231_write_register(DS3231_REG_YEAR, year_bcd)) return false;
  
  return true;
}

bool ds3231_init() {
  // Initialize I2C
  i2c_init();
  
  // Test communication
  uint8_t value;
  if (!ds3231_read_register(DS3231_REG_CONTROL, &value)) {
    return false;
  }
  
  // Set control register (disable alarms, enable oscillator)
  return ds3231_write_register(DS3231_REG_CONTROL, 0x00);
}

void setup() {
  // Initialize Serial (USB)
  Serial.begin(115200);
  delay(100);
  
  // Initialize UART2 (PA2=TX, PA3=RX)
  Serial2.begin(9600);
  delay(100);
  
  Serial.println("Testing UART2");
  Serial2.println("UART2 is working");
  
  // Initialize DS3231 RTC
  if (ds3231_init()) {
    Serial.println("DS3231 RTC initialized");
    Serial2.println("DS3231 RTC initialized");
    
    // Set default time if needed (year:23, month:4, date:9, hour:12, min:0, sec:0)
    // ds3231_set_time(23, 4, 9, 12, 0, 0);
  } else {
    Serial.println("Couldn't initialize DS3231 RTC");
    Serial2.println("Couldn't initialize DS3231 RTC");
    while (1);
  }
}

void loop() {
  // Get current date and time from DS3231
  if (ds3231_read_time()) {
    // Format and display date and time
    sprintf(dateTimeStr, "20%02d/%02d/%02d %02d:%02d:%02d", 
            year, month, date, hours, minutes, seconds);
    
    Serial.println(dateTimeStr);
    Serial2.println(dateTimeStr);
  } else {
    Serial.println("Error reading from DS3231");
    Serial2.println("Error reading from DS3231");
  }
  
  // Wait one second before next update
  delay(1000);
}
